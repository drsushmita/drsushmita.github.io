<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dr. Sushmita Yaganti Blog</title>
    <description>This are the topics that inserests me.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 25 Dec 2018 09:11:52 -0600</pubDate>
    <lastBuildDate>Tue, 25 Dec 2018 09:11:52 -0600</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Immuno-Localization</title>
        <description>&lt;p&gt;This is a quick intro to IOT. We will talk about basics of IoT, the individual components and various applications of IoT. Let’s first try to understand what IoT is by definition. It’s an inter-network of things and thing can be a person, a pet, a car, a cell phone, a Blood Glucose monitoring device or any other natural or manmade object that can connect to a network and exchange data.&lt;/p&gt;

&lt;p&gt;By definition it is very clear that the concept of IoT is not something new and it’s been there for a while. It is getting that needed attention because of improvement in various fields (but not limited to).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Communication technology&lt;/li&gt;
  &lt;li&gt;Internet Protocol Version 6&lt;/li&gt;
  &lt;li&gt;The wide coverage of cellular networks&lt;/li&gt;
  &lt;li&gt;The Emergence of Cloud and cost of data storage&lt;/li&gt;
  &lt;li&gt;World understanding the power of data and analytics.&lt;/li&gt;
  &lt;li&gt;The concept of open source hardware i.e. Arduino, Raspberry PI, etc.&lt;/li&gt;
  &lt;li&gt;Tremendous growth of Smart Phones and their usage.&lt;/li&gt;
  &lt;li&gt;Great Communities and startups.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/iot1/1.png&quot;&gt;&lt;img src=&quot;/assets/images/iot1/1.png&quot; alt=&quot;IOT Components&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To understand the concept, let’s look at the components of IoT. This is how I think the components can be broadly classified in to. We will go deep in to individual components as we go on.&lt;/p&gt;
&lt;h2 id=&quot;nodes&quot;&gt;Nodes&lt;/h2&gt;
&lt;p&gt;Nodes are the basic components of IoT that comprises of sensors / actuators, low power signal processing units like microcontrollers, power supplies, and storage and low power transceivers for communications. These nodes are the primary source of data. Based on the application and need few nodes will have built-in processing power to execute steps based on the data that they collect, other just pass the information to the Gateway and receive instructions from it. The best example for a node is Nest Thermostat. Is a powerful node though. It has algorithms built in to interpret data from the following sensors and take actions. Nest is a node and can also be considered as a gateway (built-in) for all the sensors mentioned below.
&lt;a href=&quot;/assets/images/iot1/2.png&quot;&gt;&lt;img src=&quot;/assets/images/iot1/2.png&quot; alt=&quot;IOT Components&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;sensors&quot;&gt;Sensors&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Temperature&lt;/li&gt;
  &lt;li&gt;Humidity&lt;/li&gt;
  &lt;li&gt;Near-field activity&lt;/li&gt;
  &lt;li&gt;Far-field activity&lt;/li&gt;
  &lt;li&gt;Ambient light&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gateways&quot;&gt;Gateways&lt;/h2&gt;
&lt;p&gt;Gateways are considered to be very important components of IoT. The main purpose of the Gateway is to interpret / collect sensor data based on the communication protocol of the sensors and translate the data to an understandable format before sending it to the cloud. Let’s try to understand Gateways by an example.
&lt;a href=&quot;/assets/images/iot1/3.jpg&quot;&gt;&lt;img src=&quot;/assets/images/iot1/3.jpg&quot; alt=&quot;IOT Components&quot; /&gt;&lt;/a&gt;
Let’s say there are bunch of sensors in your room like temperature sensor, humidity sensor, smoke detector, door lock senor and proximity sensor. As listed below let’s say each sensor uses different protocol to connect&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Bluetooth&lt;/li&gt;
  &lt;li&gt;Ethernet&lt;/li&gt;
  &lt;li&gt;Serial / USB&lt;/li&gt;
  &lt;li&gt;MQTT&lt;/li&gt;
  &lt;li&gt;ZigBee
With all these different protocols and considering the fact that these are low power sensors it is not possible to directly connect to the backend systems or the cloud. In some scenarios based on the data from these sensors we might have to control something else and it will become very difficult to do that as they use different protocols. This is a simple use case, but in real time there may be hundreds / thousands of nodes and it gets very difficult to manage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are very other important reasons apart from just Protocol translation and data interpretation (but not limited to).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Only passing meaningful data to the backend&lt;/li&gt;
  &lt;li&gt;Security&lt;/li&gt;
  &lt;li&gt;Device Management (Updating the sensors firmware)&lt;/li&gt;
  &lt;li&gt;Control Systems logic closer to sensors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;services--data-stores&quot;&gt;Services &amp;amp; Data Stores&lt;/h2&gt;
&lt;p&gt;Services are nothing but web services and API that will be used by the gateways to send data to cloud. Depending on the domain these services can trigger multiple actions. Considering the volume of data that these devices send, usually we use NoSQL / Big data databases. Once we have the data we can do all sort of analytics that will provide us with meaningful insights.&lt;/p&gt;

</description>
        <pubDate>Tue, 28 Nov 2017 07:09:47 -0600</pubDate>
        <link>http://localhost:4000/posts/helloworldiot/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/helloworldiot/</guid>
        
        <category>.Net</category>
        
        <category>IOT</category>
        
        <category>Azure</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>The Retina Society – 2018 Meeting Highlights</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Mon, 15 May 2017 11:09:47 -0500</pubDate>
        <link>http://localhost:4000/posts/bug-alarm/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/bug-alarm/</guid>
        
        <category>IOT</category>
        
        <category>Raspberry Pi</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Ten Tips to Prevent and Treat Iris Prolapse</title>
        <description>&lt;p&gt;In this post we will see how we can integrate QuickBooks Desktop / Server version with an Asp.Net web application. After going through the Intuit developer’s portal I understood that we need to use QuickBooks Web Connector tool to integrate a desktop version with a web application.&lt;/p&gt;

&lt;p&gt;Here is a pictorial representation of communication model and data flow.
&lt;a href=&quot;/assets/images/qb1.png&quot;&gt;&lt;img src=&quot;/assets/images/qb1.png&quot; alt=&quot;DataFlow&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are few options available to for integration but, I will provide a link to the QuickBooks Web Connector Programmer’s Guide that will explain why QBWC is the best and easy way to do it. The guide is very helpful in terms of getting started but the links are not updated. It took me a week to put everything together and make it work. I don’t want you to waste your time and get started right away with the template provided. Please get the WCF project from here.&lt;/p&gt;

&lt;h5 id=&quot;quickbooks-web-connector-program-guide-click-here&quot;&gt;QuickBooks Web Connector Program Guide. &lt;a href=&quot;/assets/files/QBWC_proguide.pdf&quot;&gt;Click Here&lt;/a&gt;&lt;/h5&gt;

&lt;h5 id=&quot;sample-wcf-servie-solution-to-get-started-with-click-here&quot;&gt;Sample WCF Servie Solution to get started with. &lt;a href=&quot;https://github.com/kodalisitaram/Asp.Net-QuickBooks-Integrator&quot; target=&quot;_blank&quot;&gt;Click Here&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;The QuickBooks Web Connector (QBWC) is a Microsoft Windows application that that enables specially designed web services (interface driven) to exchange data with QuickBooks desktop products (QuickBooks Financial Software and QuickBooks Point of Sale). For QWBC to talk to our web application we need to build a WCF service with operation that QBWC understand and expose our data through that web service. Download the tool here. &lt;a target=&quot;_blank&quot; href=&quot;https://developer.intuit.com/docs/0200_quickbooks_desktop/0100_essentials/quickbooks_web_connector&quot;&gt;Click Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In any integration we have two sides and each side has their own responsibilities. Let me quickly explain the responsibilities of each side in simple steps&lt;/p&gt;

&lt;h2 id=&quot;your-customer-side&quot;&gt;Your Customer Side&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Your Customer need to download the most recent version of QBWC tool from the link provided here and install it on his machine.&lt;/li&gt;
  &lt;li&gt;You will provide a QWC File, this is a XML configuration file that will provide all the necessary information for the QBWC to connect to your web service. It will have the end point URL, the User ID.&lt;/li&gt;
  &lt;li&gt;Provide an option in your web application using which your end user should download the QWC configuration file. In my application, user can download the config file from his profile setup.&lt;/li&gt;
  &lt;li&gt;You will provide the password for the User ID that you included in the QWC config file that you shared with the customer. In my application once user downloads the QWC file, I email the system generated random password to him email id.&lt;/li&gt;
  &lt;li&gt;Your customer will use this file to setup the integration as shown below.&lt;/li&gt;
  &lt;li&gt;Once everything is setup he can select the integration definition and press the update selected button to exchange data between QuickBooks and your web service.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;your-side&quot;&gt;Your Side&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;As I said above you will create the Web Service with operations that QuickBooks Web Connector know to call in a sequence.
    &lt;ul&gt;
      &lt;li&gt;Authenticate&lt;/li&gt;
      &lt;li&gt;ClientVersion&lt;/li&gt;
      &lt;li&gt;CloseConnection&lt;/li&gt;
      &lt;li&gt;ConnectionError&lt;/li&gt;
      &lt;li&gt;GetLastError&lt;/li&gt;
      &lt;li&gt;ReceiveResponseXML&lt;/li&gt;
      &lt;li&gt;SendRequestXML&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The developers guide will explain clearly the need for each operation. Every operation has its own purpose, but SendRequestXML is the key operation using which we will control the data flow.&lt;/li&gt;
  &lt;li&gt;For every request XML you send, QBWC will send the response to the ReceiveResponseXML operation. You can parse the XML to get the response for your request.&lt;/li&gt;
  &lt;li&gt;GetLastError method will help you to understand any errors that might occur during the data sync. The Developer guide will walk you through that flow. The code samples will help us understand it better.&lt;/li&gt;
  &lt;li&gt;During development mode, enable logging and see the sequence of operation calls. Make the flow break and see how the operations are handling errors.&lt;/li&gt;
  &lt;li&gt;You will create a QWC Configuration file that will used by your customer to setup the integration in the QBWC application.&lt;/li&gt;
  &lt;li&gt;You will include the following details in the QWC file. In detail description of these fields is provided in the integration guide on page 35.
    &lt;ul&gt;
      &lt;li&gt;AppName&lt;/li&gt;
      &lt;li&gt;AppID&lt;/li&gt;
      &lt;li&gt;AppURL&lt;/li&gt;
      &lt;li&gt;AppDescription&lt;/li&gt;
      &lt;li&gt;AppSupport&lt;/li&gt;
      &lt;li&gt;OwnerID&lt;/li&gt;
      &lt;li&gt;FileID&lt;/li&gt;
      &lt;li&gt;UserName&lt;/li&gt;
      &lt;li&gt;QBType&lt;/li&gt;
      &lt;li&gt;Style&lt;/li&gt;
      &lt;li&gt;AuthFlags
&lt;a href=&quot;/assets/images/qb2.png&quot;&gt;&lt;img src=&quot;/assets/images/qb2.png&quot; alt=&quot;SampleQWC&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;You have to create a password for the user id that you have included in the QWC file and share it with the customer.&lt;/li&gt;
  &lt;li&gt;One important thing to remember is that QBWC integration will work on HTTP only when your end point address is running locally, meaning only when the host name is localhost. It needs HTTPS when you deploy it to your QA or PROD environment.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 28 Nov 2016 07:09:47 -0600</pubDate>
        <link>http://localhost:4000/posts/quickbooks-netapp/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/quickbooks-netapp/</guid>
        
        <category>.Net</category>
        
        <category>Integration</category>
        
        <category>Quickbooks</category>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>
